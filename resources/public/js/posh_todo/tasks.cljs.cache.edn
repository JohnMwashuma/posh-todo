;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name posh-todo.tasks, :imports nil, :requires {p posh.core, posh.core posh.core, db posh-todo.db, posh-todo.db posh-todo.db, util posh-todo.util, posh-todo.util posh-todo.util, comp posh-todo.components, posh-todo.components posh-todo.components}, :uses {conn posh-todo.db}, :defs {task {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([conn task-id]))}, :name posh-todo.tasks/task, :variadic false, :file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :end-column 11, :method-params ([conn task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn task-id]))}, add-task! {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([conn category-id task-name]))}, :name posh-todo.tasks/add-task!, :variadic false, :file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :end-column 16, :method-params ([conn category-id task-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([conn category-id task-name]))}, task-panel {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([conn category-id]))}, :name posh-todo.tasks/task-panel, :variadic false, :file "/home/teddy/clojure/posh-todo/src/posh_todo/tasks.cljs", :end-column 17, :method-params ([conn category-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn category-id]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:task/pinned :task/name :task/done :key :task/_category :category/name :db.fn/retractEntity :div :task/category :db/id :span}, :order [:task/done :task/pinned :span :task/name :db.fn/retractEntity :task/category :category/name :task/_category :db/id :div :key]}, :doc nil}